{"version":3,"file":"static/js/335.6d6c7a71.chunk.js","mappings":"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","sources":["webpack://react-homework/./src/components/ContactForm/contactForm.module.css?2173","components/ContactForm/ContactForm.jsx","webpack://react-homework/./src/components/ContactList/ContactList.module.css?1ce0","webpack://react-homework/./src/components/ContactItem/ContactItem.module.css?be2b","components/ContactItem/ContactItem.jsx","components/Loader/LoaderBackground.styled.js","components/ContactList/ContactList.jsx","webpack://react-homework/./src/components/Filter/filter.module.css?e01c","components/Filter/Filter.jsx","pages/ContactsPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"contactForm_contactForm__aVixc\",\"contactForm__label\":\"contactForm_contactForm__label__zqFPe\",\"contactForm__button\":\"contactForm_contactForm__button__1fAmX\"};","import { useState } from 'react';\nimport css from './contactForm.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from 'redux/contactsSlice/contactsSlice';\n\nimport { fetchAddContactThunk } from 'redux/contactsOperations/contactsOperations';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleImputChange = event => {\n    const { name, value } = event.currentTarget;\n    // eslint-disable-next-line default-case\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n    }\n  };\n\n  const checkingAddedContact = outName => {\n    return contacts.find(({ name }) => name === outName);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const contact = {\n      name,\n      number,\n    };\n    const newContact = checkingAddedContact(name);\n    newContact\n      ? alert(`${newContact.name} is already in contacts`)\n      : dispatch(fetchAddContactThunk(contact));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <>\n      <form className={css.contactForm} onSubmit={handleSubmit}>\n        <label className={css.contactForm__label}>\n          <span className={css.contactForm__text}>Name</span>\n          <input\n            className={css.contactForm__input}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={name}\n            onChange={handleImputChange}\n            placeholder=\"\"\n          />\n        </label>\n        <label className={css.contactForm__label}>\n          <span className={css.contactForm__text}>Number</span>\n          <input\n            className={css.contactForm__input}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            value={number}\n            onChange={handleImputChange}\n            placeholder=\"+\"\n            required\n          />\n        </label>\n        <button className={css.contactForm__button} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    </>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__JT4co\"};","// extracted by mini-css-extract-plugin\nexport default {\"contactList__item\":\"ContactItem_contactList__item__8db7-\",\"contactList__text\":\"ContactItem_contactList__text__mb4eW\",\"contactList__button\":\"ContactItem_contactList__button__jZtu2\"};","import React from 'react';\nimport css from './ContactItem.module.css';\nimport propTypes from 'prop-types';\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { fetchDeleteContactsThunk } from 'redux/contactsOperations/contactsOperations';\nimport { getLoading } from 'redux/contactsSlice/contactsSlice';\n\nconst ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const loading = useSelector(getLoading);\n\n  return (\n    <li className={css.contactList__item}>\n      <span className={css.contactList__text}>{`${name}: ${number}`}</span>\n      <button\n        className={css.contactList__button}\n        onClick={() => {\n          dispatch(fetchDeleteContactsThunk({ id }));\n        }}\n        disabled={loading ? true : false}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContactItem.propTypes = {\n  id: propTypes.string.isRequired,\n  name: propTypes.string.isRequired,\n  number: propTypes.string.isRequired,\n};\n\nexport default ContactItem;\n","import styled from '@emotion/styled';\r\n\r\nexport const LoaderBackground = styled.div`\r\n  min-width: 100vw;\r\n  min-height: 100vh;\r\n  background-color: rgb(128 128 128 / 23%);\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n`;\r\n","import React, { useEffect } from 'react';\nimport css from './ContactList.module.css';\nimport ContactItem from 'components/ContactItem/ContactItem';\nimport Loader from 'components/Loader/Loader';\nimport { LoaderBackground } from 'components/Loader/LoaderBackground.styled';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  getContacts,\n  getFilterValue,\n  getLoading,\n  getError,\n} from 'redux/contactsSlice/contactsSlice';\nimport { fetchContactsThunk } from 'redux/contactsOperations/contactsOperations';\n\nconst ContactList = () => {\n  const contactsList = useSelector(getContacts);\n  const filteredContacts = useSelector(getFilterValue);\n  const isLoading = useSelector(getLoading);\n  const isError = useSelector(getError);\n  const dispatch = useDispatch();\n  //маунт списка при первой загрузке.\n  useEffect(() => {\n    dispatch(fetchContactsThunk());\n  }, [dispatch]);\n  // слежение за фильтром и отрисовка списка, + отмена предидущего запроса.\n  useEffect(() => {\n    const promise = dispatch(fetchContactsThunk());\n    return () => {\n      console.log('effect on  filter abort');\n      promise.abort();\n    };\n  }, [dispatch, filteredContacts]);\n\n  const getFilteredContacts = () => {\n    const normalizedFilter = filteredContacts.toLowerCase();\n    return contactsList.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n  console.log('state posle', contactsList);\n  return (\n    <>\n      {/* loader */}\n      {isLoading && getFilteredContacts().length === 0 && (\n        <LoaderBackground>\n          <Loader />\n        </LoaderBackground>\n      )}\n      {/* error */}\n      {isError && <h1>Error 404 :D</h1>}\n      {/* notFound */}\n      {getFilteredContacts().length === 0 && !isLoading && (\n        <p style={{ textAlign: 'center', fontSize: 24, fontWeight: 700 }}>\n          Contact not found\n        </p>\n      )}\n      {/* completed */}\n      {getFilteredContacts().length > 0 && (\n        <ul className={css.contactList}>\n          {getFilteredContacts().map(({ id, name, number }) => (\n            <ContactItem id={id} name={name} number={number} key={id} />\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"filter_label__qJCuu\"};","import React from 'react';\nimport css from './filter.module.css';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFilterValue } from 'redux/contactsSlice/contactsSlice';\nimport { filterContact } from 'redux/contactsSlice/contactsSlice';\n\nconst Filter = () => {\n  const filterInputValue = useSelector(getFilterValue);\n  const dispatch = useDispatch();\n\n  const handleFilterInput = event => {\n    dispatch(filterContact({ text: event.currentTarget.value }));\n  };\n\n  return (\n    <>\n      <label className={css.label}>\n        Find by contact name\n        <input\n          className={css.inputFilter}\n          type=\"text\"\n          value={filterInputValue}\n          onChange={handleFilterInput}\n        ></input>\n      </label>\n    </>\n  );\n};\n\nexport default Filter;\n","import ContactForm from 'components/ContactForm/ContactForm';\r\nimport ContactList from 'components/ContactList/ContactList';\r\nimport Filter from 'components/Filter/Filter';\r\n\r\nconst ContactsPage = () => {\r\n  return (\r\n    <>\r\n      <p>ContactsList</p>\r\n      <ContactForm />\r\n      <Filter />\r\n      <ContactList />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactsPage;\r\n"],"names":["useState","name","setName","number","setNumber","contacts","useSelector","getContacts","dispatch","useDispatch","handleImputChange","event","currentTarget","value","reset","className","css","onSubmit","preventDefault","outName","contact","newContact","find","alert","fetchAddContactThunk","type","pattern","title","required","onChange","placeholder","id","loading","getLoading","onClick","fetchDeleteContactsThunk","disabled","LoaderBackground","styled","contactsList","filteredContacts","getFilterValue","isLoading","isError","getError","useEffect","fetchContactsThunk","promise","console","log","abort","getFilteredContacts","normalizedFilter","toLowerCase","filter","includes","length","Loader","style","textAlign","fontSize","fontWeight","map","filterInputValue","filterContact","text"],"sourceRoot":""}